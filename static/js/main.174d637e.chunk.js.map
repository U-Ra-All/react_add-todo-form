{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","email","name","className","href","TodoInfo","todo","id","title","completed","cn","TodoList","todos","map","username","userId","todosFromServer","usersFromServer","find","emptyTodo","userName","isTitleValid","isUserNameValid","nextTodoId","Math","max","App","useState","todoList","setTodoList","newTodo","setNewTodo","handleChange","e","target","value","includes","slice","toLowerCase","action","method","onSubmit","preventDefault","todoUser","todoToAdd","prevTodos","htmlFor","type","placeholder","onChange","disabled","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.174d637e.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({\n  todo:\n  {\n    id,\n    title,\n    completed,\n    user,\n  },\n}) => {\n  return (\n    <article\n      data-id={id}\n      className={cn('TodoInfo', { 'TodoInfo--completed': completed })}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { useState, FormEvent } from 'react';\n\nimport './App.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUser(userId: number): User | null {\n  return usersFromServer.find((user) => user.id === userId) || null;\n}\n\nexport const todos: Todo[] = todosFromServer.map((todo) => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nconst allowedChars = `0123456789 \n  abcdefghigklmnopqrstuvwxyz\n  абвгдеёжзийклмнопрстуфхцчшщъыьэюяґєії`;\n\ntype NewTodo = {\n  title: string;\n  userName: string;\n  isTitleValid: boolean;\n  isUserNameValid: boolean;\n};\n\nconst emptyTodo: NewTodo = {\n  title: '',\n  userName: '',\n  isTitleValid: true,\n  isUserNameValid: true,\n};\n\nlet nextTodoId = Math.max(...todosFromServer.map((todo) => todo.id)) + 1;\n\nexport const App: React.FC = () => {\n  const [todoList, setTodoList] = useState<Todo[]>(todos);\n\n  const [newTodo, setNewTodo] = useState<NewTodo>(emptyTodo);\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n  ) => {\n    const { name, value } = e.target;\n\n    if (\n      name === 'title'\n      && allowedChars.includes(value.slice(-1).toLowerCase())\n    ) {\n      setNewTodo((todo) => ({\n        ...todo,\n        [name]: value,\n        isTitleValid: true,\n      }));\n    }\n\n    if (name === 'userName') {\n      setNewTodo((todo) => ({\n        ...todo,\n        [name]: value,\n        isUserNameValid: true,\n      }));\n    }\n  };\n\n  const handleAddTodo = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!newTodo.title || !newTodo.userName) {\n      return setNewTodo((todo) => ({\n        ...todo,\n        isTitleValid: !!newTodo.title,\n        isUserNameValid: !!newTodo.userName,\n      }));\n    }\n\n    const todoUser: User | undefined = usersFromServer.find(\n      (user) => user.name === newTodo.userName,\n    );\n\n    const todoToAdd: Todo = {\n      id: nextTodoId,\n      title: newTodo.title,\n      userId: todoUser?.id,\n      completed: false,\n      user: todoUser,\n    };\n\n    setTodoList((prevTodos) => [...prevTodos, todoToAdd]);\n\n    nextTodoId += 1;\n\n    return setNewTodo(emptyTodo);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/users\" method=\"POST\" onSubmit={handleAddTodo}>\n        <div className=\"field\">\n          <label htmlFor=\"todoTitle\">Title: </label>\n          <input\n            id=\"todoTitle\"\n            type=\"text\"\n            placeholder=\"Enter a title\"\n            data-cy=\"titleInput\"\n            name=\"title\"\n            value={newTodo.title}\n            onChange={handleChange}\n          />\n          {!newTodo.isTitleValid && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"todoUser\">User: </label>\n          <select\n            id=\"todoUser\"\n            data-cy=\"userSelect\"\n            name=\"userName\"\n            value={newTodo.userName}\n            onChange={handleChange}\n          >\n            <option value=\"\" disabled>\n              Choose a user\n            </option>\n            {usersFromServer.map((user) => (\n              <option key={user.id} value={user.name}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {!newTodo.isUserNameValid && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      {!!todos.length && <TodoList todos={todoList} />}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}